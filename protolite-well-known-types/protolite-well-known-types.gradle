// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import groovy.io.FileType


plugins {
    id 'firebase-library'
    id 'com.google.protobuf'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}
android {
    compileSdkVersion project.targetSdkVersion
    defaultConfig {
        targetSdkVersion project.targetSdkVersion
        minSdkVersion project.minSdkVersion
        versionCode 1
        versionName '1.0'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main.resources.srcDirs = ['build/extracted-protos/main/', 'src/main/proto']
    sourceSets.main.resources.includes = ['**/*.proto']

    libraryVariants.all { variant ->
        Task retrolambdaTask = getTasksByName("transformClassesWithRetrolambdaFor" + variant.name.capitalize(), true).first()
        Task deleteDuration = task "${String.format("deleteDuration" + variant.name.capitalize())}" {
            doLast {
                new File("${project.getBuildDir().getAbsolutePath()}/intermediates/javac/${variant.name}/compile${variant.name.capitalize()}JavaWithJavac/classes/com/google/protobuf/").eachFile(FileType.FILES) { file ->
                    if (file.name.contains('Duration')) {
                        file.delete()
                    }
                }
                new File("${project.getBuildDir().getAbsolutePath()}/intermediates/transforms/retrolambda/${variant.name}/0/com/google/protobuf/").eachFile(FileType.FILES) { file ->
                    if (file.name.contains('Duration')) {
                        file.delete()
                    }
                }
            }
        }
        variant.processJavaResources.dependsOn(deleteDuration)
        deleteDuration.mustRunAfter(retrolambdaTask)
        deleteDuration.dependsOn(retrolambdaTask)
    }
}


dependencies {
    implementation 'com.google.protobuf:protobuf-javalite:3.11.0'

    protobuf files('src/lib/proto')

    protobuf("com.google.api.grpc:proto-google-common-protos:1.18.0"){
        exclude group: "com.google.protobuf", module: "protobuf-java"
    }
}
